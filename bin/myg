#!/usr/bin/env ruby

require 'mygen'
require 'gli'
require 'mygen'

include GLI::App

program_desc 'A simple code generator'

version Mygen::VERSION

subcommand_option_handling :normal
arguments :strict

desc "Dry run, doesn't change files"
switch :s


desc 'Describe some flag here'
default_value 'the default'


desc 'Apply an arbitrary generator'
arg_name 'The generator to run'
command :generate do |c|
  c.desc 'Describe a flag to generate'
  c.flag :f
  Mygen::Plugins.load.each do |p|
    plugin = p.new
    c.desc plugin.description
    c.arg 'name'
    c.command plugin.generator_name.to_sym do |s|
      plugin.plugin_commands(s) if plugin.respond_to?(:plugin_commands)
      s.action do |global_options, options, args|
        plugin.dry_run = global_options[:s]
        plugin.name = args[0]
        plugin.dest_dir = args[0]
        plugin.call if plugin.respond_to?(:call)
      end
    end
  end
  c.action do |global_options,options,args|
    # Your command logic here
    # If you have any errors, just raise them
    # raise "that command made no sense"
    help_now!('Select a generator') if args.empty?
  end
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  # Error logic here
  # return false to skip default error handling
  true
end

exit run(ARGV)
